{
    "$defs": {
        "Activity": {
            "additionalProperties": false,
            "description": "An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Activity",
            "type": "object"
        },
        "AdministrativeOperation": {
            "additionalProperties": false,
            "description": "A event intended for use in the operational administration, mitigation, repair, or prevention of fault",
            "properties": {
                "administrative_operation_regulatory_status_world_wide": {
                    "description": "An agglomeration of administrative operation regulatory status worldwide. Not specific to one regulator.",
                    "type": "string"
                },
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "highest_regulator_approval_status": {
                    "description": "Should be the highest level of regulatory approval this control entity or device has, regardless of which named thing is currently being reviewed. For specific levels of approval for specific things, see the association slot: 'regulator approval status.'",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_supplement": {
                    "description": "added to something else in order to complete or enhance it.",
                    "type": "string"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "routes_of_delivery": {
                    "description": "the method or process of administering a control mixture to have effect in a named thing",
                    "items": {
                        "$ref": "#/$defs/DeliveryEnum"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "AdministrativeOperation",
            "type": "object"
        },
        "AdministrativeOperationExposure": {
            "additionalProperties": false,
            "description": "An intake of a particular administrative operation.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "AdministrativeOperationExposure",
            "type": "object"
        },
        "AdministrativeOperationToClassAssociation": {
            "additionalProperties": false,
            "description": "An interaction between a administrative operation and a class or subclasses.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "the class or subclasses that is affected by the administrative operation"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "the administrative operation that is an interactor",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "AdministrativeOperationToClassAssociation",
            "type": "object"
        },
        "Agent": {
            "additionalProperties": false,
            "description": "person, group, organization or project that provides a piece of information (i.e. a knowledge association)",
            "properties": {
                "address": {
                    "description": "the particulars of the place where someone or an organization is situated. For now, this slot is a simple text \"blob\" containing all relevant details of the given location for fitness of purpose. For the moment, this \"address\" can include other contact details such as email and phone number(?).",
                    "type": "string"
                },
                "affiliation": {
                    "description": "a professional relationship between one provider (x) within another provider (often an organization). Target provider identity should be specified by a CURIE. Providers may have multiple affiliations.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Different classes of agents have distinct preferred identifiers. For publishers, use the ISBN publisher code. See https://grp.isbn-international.org/ for publisher code lookups. For editors, authors and  individual providers, use the individual's ORCID if available; Otherwise, a ScopusID, ResearchID or Google Scholar ID ('GSID') may be used if the author ORCID is unknown. Institutional agents could be identified by an International Standard Name Identifier ('ISNI') code.",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "it is recommended that an author's 'name' property be formatted as \"surname, firstname initial.\"",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Agent",
            "type": "object"
        },
        "Article": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "authors": {
                    "description": "connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as \"surname, firstname initial.\".  Note that this property is a node annotation voicing the citation list of authorship which might typically otherwise be more completely documented in base:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "iso_abbreviation": {
                    "description": "Optional value, if used locally as a convenience, is set to the iso abbreviation of the 'published in' parent.",
                    "type": "string"
                },
                "issue": {
                    "description": "issue of a newspaper, a scientific journal or magazine for reference purpose",
                    "type": "string"
                },
                "keywords": {
                    "description": "keywords tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "lcsh_terms": {
                    "description": "Library of Congress Subject Headings (LCSH) terms tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).",
                    "type": "string"
                },
                "pages": {
                    "description": "When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "published_in": {
                    "description": "The enclosing parent serial containing the article should have industry-standard identifier from ISSN.",
                    "type": "string"
                },
                "rights": {
                    "type": "string"
                },
                "summary": {
                    "description": "executive  summary of a publication",
                    "type": "string"
                },
                "type": {
                    "description": "Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of base:category base:OntologyClass.",
                    "type": "string"
                },
                "volume": {
                    "description": "volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication",
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "published_in",
                "id",
                "category",
                "type"
            ],
            "title": "Article",
            "type": "object"
        },
        "AssemblyComplex": {
            "additionalProperties": false,
            "description": "A stable assembly of two or more assemblies, i.e. system operation, redundancy entity, etc, in which at least one component is a system operation and the constituent parts function together",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "classes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "AssemblyComplex",
            "type": "object"
        },
        "AssemblyToComponentAssociation": {
            "additionalProperties": false,
            "description": "A functional association between a assembly (class, subclasses or complex) and a component where the entity carries out its function in the component.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "class describing the activity, process or localization of the subclasses",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/AssemblyMixin",
                    "description": "class or assembly complex that has the function associated with the relevant term"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "AssemblyToComponentAssociation",
            "type": "object"
        },
        "AssemblyToComputationalProcessAssociation": {
            "additionalProperties": false,
            "description": "A functional association between a assembly (class, subclasses or complex) and a computational process or pathway where the entity carries out some part of the process, regulates it, or acts upstream of it.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "class describing the activity, process or localization of the subclasses",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/AssemblyMixin",
                    "description": "class or assembly complex that has the function associated with the relevant term"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "AssemblyToComputationalProcessAssociation",
            "type": "object"
        },
        "AssemblyToOperationalActivityAssociation": {
            "additionalProperties": false,
            "description": "A functional association between a assembly (class, subclasses or complex) and a operational activity where the entity carries out the activity, or contributes to its execution.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "class describing the activity, process or localization of the subclasses",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/AssemblyMixin",
                    "description": "class or assembly complex that has the function associated with the relevant term"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "AssemblyToOperationalActivityAssociation",
            "type": "object"
        },
        "Association": {
            "additionalProperties": false,
            "description": "A typed association between two entities, supported by evidence",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "Association",
            "type": "object"
        },
        "Attribute": {
            "additionalProperties": false,
            "description": "A property or characteristic of an entity. For example, an apple may have properties such as color, shape, age, crispiness. An environmental sample may have attributes such as depth, lat, long, material.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "Attribute",
            "type": "object"
        },
        "Behavior": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "enabled_by": {
                    "description": "holds between a process and an entity, where the entity executes the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_input": {
                    "description": "holds between a process and a continuant, where the continuant is an input into the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_output": {
                    "description": "holds between a process and a continuant, where the continuant is an output of the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Behavior",
            "type": "object"
        },
        "BehaviorToBehavioralFeatureAssociation": {
            "additionalProperties": false,
            "description": "An association between an aggregate behavior and a behavioral feature manifested by the element exhibited or has exhibited the behavior.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "behavioral feature that is the object of the association",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "sex_qualifier": {
                    "description": "a qualifier used in a entity association to state whether the association is specific to a particular sex.",
                    "type": "string"
                },
                "subject": {
                    "description": "behavior that is the subject of the association",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "BehaviorToBehavioralFeatureAssociation",
            "type": "object"
        },
        "BehavioralExposure": {
            "additionalProperties": false,
            "description": "A behavioral exposure is a factor relating to behavior impacting an individual.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "BehavioralExposure",
            "type": "object"
        },
        "BehavioralFeature": {
            "additionalProperties": false,
            "description": "A observable feature which is behavioral in nature.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "BehavioralFeature",
            "type": "object"
        },
        "BehavioralOutcome": {
            "additionalProperties": false,
            "description": "An outcome resulting from an exposure event which is the manifestation of some behavior.",
            "title": "BehavioralOutcome",
            "type": "object"
        },
        "BiologicalSex": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "BiologicalSex",
            "type": "object"
        },
        "Book": {
            "additionalProperties": false,
            "description": "This class may rarely be instantiated except if use cases of a given knowledge graph support its utility.",
            "properties": {
                "authors": {
                    "description": "connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as \"surname, firstname initial.\".  Note that this property is a node annotation voicing the citation list of authorship which might typically otherwise be more completely documented in base:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Books should have industry-standard identifier such as from ISBN.",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "keywords": {
                    "description": "keywords tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "lcsh_terms": {
                    "description": "Library of Congress Subject Headings (LCSH) terms tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).",
                    "type": "string"
                },
                "pages": {
                    "description": "When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "summary": {
                    "description": "executive  summary of a publication",
                    "type": "string"
                },
                "type": {
                    "description": "Should generally be set to an ontology class defined term for 'book'.",
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category",
                "type"
            ],
            "title": "Book",
            "type": "object"
        },
        "BookChapter": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "authors": {
                    "description": "connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as \"surname, firstname initial.\".  Note that this property is a node annotation voicing the citation list of authorship which might typically otherwise be more completely documented in base:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "chapter": {
                    "description": "chapter of a book",
                    "type": "string"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "keywords": {
                    "description": "keywords tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "lcsh_terms": {
                    "description": "Library of Congress Subject Headings (LCSH) terms tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).",
                    "type": "string"
                },
                "pages": {
                    "description": "When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "published_in": {
                    "description": "The enclosing parent book containing the chapter should have industry-standard identifier from ISBN.",
                    "type": "string"
                },
                "rights": {
                    "type": "string"
                },
                "summary": {
                    "description": "executive  summary of a publication",
                    "type": "string"
                },
                "type": {
                    "description": "Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of base:category base:OntologyClass.",
                    "type": "string"
                },
                "volume": {
                    "description": "volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication",
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "published_in",
                "id",
                "category",
                "type"
            ],
            "title": "BookChapter",
            "type": "object"
        },
        "Case": {
            "additionalProperties": false,
            "description": "An individual instance of a particular situation; an example of something occuring",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Case",
            "type": "object"
        },
        "CaseToObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "An association between a case (e.g. individual element) and a observable feature in which the element has or has had the observable feature.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "observable class",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "sex_qualifier": {
                    "description": "a qualifier used in a entity association to state whether the association is specific to a particular sex.",
                    "type": "string"
                },
                "subject": {
                    "description": "the case (e.g. thing) that has the property",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "CaseToObservableFeatureAssociation",
            "type": "object"
        },
        "ChiSquaredAnalysisResult": {
            "additionalProperties": false,
            "description": "A result of a chi squared analysis",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ChiSquaredAnalysisResult",
            "type": "object"
        },
        "Class": {
            "additionalProperties": false,
            "description": "collection of items in an ontology sharing common characteristics. Classes provide an abstraction mechanism for grouping resources with similar characteristics.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "classes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "symbol": {
                    "description": "Symbol for a particular thing",
                    "type": "string"
                },
                "synonym": {
                    "description": "Alternate human-readable names for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Class",
            "type": "object"
        },
        "ClassToExpressionSiteAssociation": {
            "additionalProperties": false,
            "description": "An association between a class and an expression site, possibly qualified by stage/timing info.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "location in which the class is available",
                    "type": "string"
                },
                "predicate": {
                    "description": "expression relationship",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "quantifier_qualifier": {
                    "description": "can be used to indicate magnitude, or also ranking",
                    "type": "string"
                },
                "stage_qualifier": {
                    "description": "stage at which the class is expressed in the site",
                    "type": "string"
                },
                "subject": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "class positively within the specified deployment entity (or subclass, i.e. component) location."
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ClassToExpressionSiteAssociation",
            "type": "object"
        },
        "ClassToFaultAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "fault",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "subject": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "class in which variation is correlated with the fault, may be protective or causative or associative, or as a model"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ClassToFaultAssociation",
            "type": "object"
        },
        "ClassToObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "observable class",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "sex_qualifier": {
                    "description": "a qualifier used in a entity association to state whether the association is specific to a particular sex.",
                    "type": "string"
                },
                "subject": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "class in which variation is correlated with the observable feature"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ClassToObservableFeatureAssociation",
            "type": "object"
        },
        "ClassToPathwayAssociation": {
            "additionalProperties": false,
            "description": "An interaction between a class or subclasses and a computational process or pathway.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "the pathway that includes or is affected by the class or subclasses",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "the class or subclasses that participates or influences the pathway"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ClassToPathwayAssociation",
            "type": "object"
        },
        "Cohort": {
            "additionalProperties": false,
            "description": "A group of people banded together or treated as a group who share common characteristics. A cohort 'study' is a particular form of longitudinal study that samples a cohort, performing a cross-section at intervals through time.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Cohort",
            "type": "object"
        },
        "CommonDataElement": {
            "additionalProperties": false,
            "description": "A Common Data Element (CDE) is a standardized, precisely defined question, paired with a set of allowable responses, used systematically across different sites, studies, or clinical trials to ensure consistent data collection. Multiple CDEs (from one or more Collections) can be curated into Forms. (https://cde.nlm.nih.gov/home)",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "CommonDataElement",
            "type": "object"
        },
        "ComplexOperationalMixture": {
            "additionalProperties": false,
            "description": "A complex operational mixture is a control mixture composed of two or more operational entities with unknown concentration",
            "properties": {
                "administrative_operation_regulatory_status_world_wide": {
                    "description": "An agglomeration of administrative operation regulatory status worldwide. Not specific to one regulator.",
                    "type": "string"
                },
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "highest_regulator_approval_status": {
                    "description": "Should be the highest level of regulatory approval this control entity or device has, regardless of which named thing is currently being reviewed. For specific levels of approval for specific things, see the association slot: 'regulator approval status.'",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_supplement": {
                    "description": "added to something else in order to complete or enhance it.",
                    "type": "string"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "routes_of_delivery": {
                    "description": "the method or process of administering a control mixture to have effect in a named thing",
                    "items": {
                        "$ref": "#/$defs/DeliveryEnum"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ComplexOperationalMixture",
            "type": "object"
        },
        "Component": {
            "additionalProperties": false,
            "description": "The component is the smallest system entity that can be deployed, isolated, and restored independently. A self-contained assembly of parts within a complete operating unit or module, which cannot be further subdivided without loss of identity or function.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Component",
            "type": "object"
        },
        "ComponentSystem": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ComponentSystem",
            "type": "object"
        },
        "ComponentType": {
            "additionalProperties": false,
            "description": "A component type defines the set of components running the same software and sharing the same configuration. It's a single point of configuration control.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ComponentType",
            "type": "object"
        },
        "ComputationalProcess": {
            "additionalProperties": false,
            "description": "One or more causally connected executions of operational functions",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "enabled_by": {
                    "description": "holds between a process and an entity, where the entity executes the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_input": {
                    "description": "holds between a process and a continuant, where the continuant is an input into the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_output": {
                    "description": "holds between a process and a continuant, where the continuant is an output of the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ComputationalProcess",
            "type": "object"
        },
        "ComputationalProcessOrActivity": {
            "additionalProperties": false,
            "description": "Either an individual operational activity, or a collection of causally connected operational activities",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "enabled_by": {
                    "description": "holds between a process and an entity, where the entity executes the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_input": {
                    "description": "holds between a process and a continuant, where the continuant is an input into the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_output": {
                    "description": "holds between a process and a continuant, where the continuant is an output of the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ComputationalProcessOrActivity",
            "type": "object"
        },
        "ConfidenceLevel": {
            "additionalProperties": false,
            "description": "Level of confidence in a statement",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ConfidenceLevel",
            "type": "object"
        },
        "ContributorAssociation": {
            "additionalProperties": false,
            "description": "Any association between an entity (such as a publication) and various agents that contribute to its realisation",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "agent helping to realise the given entity (e.g. such as a publication)",
                    "type": "string"
                },
                "predicate": {
                    "description": "generally one of the predicate values 'provider', 'publisher', 'editor' or 'author'",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "this field can be used to annotate special characteristics of an agent relationship, such as the fact that a given author agent of a publication is the 'corresponding author'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "information content entity which an agent has helped realise",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ContributorAssociation",
            "type": "object"
        },
        "ControlEntity": {
            "additionalProperties": false,
            "description": "A control entity is a entity that pertains to control or orchestration",
            "properties": {
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ControlEntity",
            "type": "object"
        },
        "ControlEntityAssessesNamedThingAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ControlEntityAssessesNamedThingAssociation",
            "type": "object"
        },
        "ControlExposure": {
            "additionalProperties": false,
            "description": "A control exposure is an intake of a particular control entity",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "ControlExposure",
            "type": "object"
        },
        "ControlMixture": {
            "additionalProperties": false,
            "description": "A control mixture is a control entity composed of two or more operational entities.",
            "properties": {
                "administrative_operation_regulatory_status_world_wide": {
                    "description": "An agglomeration of administrative operation regulatory status worldwide. Not specific to one regulator.",
                    "type": "string"
                },
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "highest_regulator_approval_status": {
                    "description": "Should be the highest level of regulatory approval this control entity or device has, regardless of which named thing is currently being reviewed. For specific levels of approval for specific things, see the association slot: 'regulator approval status.'",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_supplement": {
                    "description": "added to something else in order to complete or enhance it.",
                    "type": "string"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "routes_of_delivery": {
                    "description": "the method or process of administering a control mixture to have effect in a named thing",
                    "items": {
                        "$ref": "#/$defs/DeliveryEnum"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ControlMixture",
            "type": "object"
        },
        "ControlRole": {
            "additionalProperties": false,
            "description": "A role played by the entity or part thereof within a control context.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "ControlRole",
            "type": "object"
        },
        "ControlToControlAssociation": {
            "additionalProperties": false,
            "description": "A relationship between two control entities. This can encompass actual interactions as well as temporal causal edges, e.g. one control converted to another.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "the control element that is the target of the statement",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/ControlEntityOrClassOrSubclasses",
                    "description": "the control entity or entity that is an interactor"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ControlToControlAssociation",
            "type": "object"
        },
        "ControlToFaultOrObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "An interaction between a control entity and a observable feature or fault, where the presence of the control gives rise to or exacerbates the observable feature.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "the fault or observable feature that is affected by the control",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/ControlEntityOrClassOrSubclasses",
                    "description": "the control entity or entity that is an interactor"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ControlToFaultOrObservableFeatureAssociation",
            "type": "object"
        },
        "ControlToPathwayAssociation": {
            "additionalProperties": false,
            "description": "An interaction between a control entity and a computational process or pathway.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "the pathway that is affected by the control",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "the control entity that is affecting the pathway",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ControlToPathwayAssociation",
            "type": "object"
        },
        "ControllableClassCategoryEnum": {
            "description": "Controllable classes",
            "enum": [
                "0",
                "1",
                "2"
            ],
            "title": "ControllableClassCategoryEnum",
            "type": "string"
        },
        "ControllableClassToFaultAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "$ref": "#/$defs/ControllableClassCategoryEnum"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "fault",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "subject": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "class in which variation is correlated with the fault in a protective manner, or if the subclasses can be targeted by a small operation and this leads to a protective or improving fault state."
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ControllableClassToFaultAssociation",
            "type": "object"
        },
        "Dataset": {
            "additionalProperties": false,
            "description": "an item that refers to a collection of data from a data source.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Dataset",
            "type": "object"
        },
        "DatasetDistribution": {
            "additionalProperties": false,
            "description": "an item that holds distribution level information about a dataset",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "distribution_download_url": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "DatasetDistribution",
            "type": "object"
        },
        "DatasetSummary": {
            "additionalProperties": false,
            "description": "an item that holds summary level information about a dataset.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "source_logo": {
                    "type": "string"
                },
                "source_web_page": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "DatasetSummary",
            "type": "object"
        },
        "DatasetVersion": {
            "additionalProperties": false,
            "description": "an item that holds version level information about a dataset.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_dataset": {
                    "type": "string"
                },
                "has_distribution": {
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "ingest_date": {
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "DatasetVersion",
            "type": "object"
        },
        "DeliveryEnum": {
            "description": "Delivery type",
            "enum": [
                "0",
                "1",
                "2"
            ],
            "title": "DeliveryEnum",
            "type": "string"
        },
        "DeploymentEntity": {
            "additionalProperties": false,
            "description": "A process location, or gross deployment part",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "DeploymentEntity",
            "type": "object"
        },
        "Device": {
            "additionalProperties": false,
            "description": "A thing made or adapted for a particular purpose, especially a piece of mechanical or electronic equipment.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Device",
            "type": "object"
        },
        "DirectionQualifierEnum": {
            "description": "",
            "enum": [
                "increased",
                "upregulated",
                "decreased",
                "downregulated"
            ],
            "title": "DirectionQualifierEnum",
            "type": "string"
        },
        "EmpiricalAttribute": {
            "additionalProperties": false,
            "description": "Attributes relating to a empirical manifestation",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "EmpiricalAttribute",
            "type": "object"
        },
        "EmpiricalCourse": {
            "additionalProperties": false,
            "description": "The course an entity typically takes from its onset, progression in time, and eventual resolution or termination of affected entity, without obstruction.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "EmpiricalCourse",
            "type": "object"
        },
        "EmpiricalEntity": {
            "additionalProperties": false,
            "description": "Any entity or process that exists in the empirical domain and outside the computational realm. Failures are placed under computational entities",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "EmpiricalEntity",
            "type": "object"
        },
        "EmpiricalFinding": {
            "additionalProperties": false,
            "description": "this category is currently considered broad enough to tag empirical lab measurements and other computational attributes taken as 'empirical traits' with some statistical score, for example, a p value in acquired associations.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "EmpiricalFinding",
            "type": "object"
        },
        "EmpiricalIntervention": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "EmpiricalIntervention",
            "type": "object"
        },
        "EmpiricalMeasurement": {
            "additionalProperties": false,
            "description": "A empirical measurement is a special kind of attribute which results from a quality of entity observation from a subject individual or sample. Measurements can be connected to their subject by the 'has attribute' slot.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "EmpiricalMeasurement",
            "type": "object"
        },
        "EmpiricalModifier": {
            "additionalProperties": false,
            "description": "Used to characterize and specify the observable changes with respect to severity, and other aspects",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "EmpiricalModifier",
            "type": "object"
        },
        "EntityToFaultAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "regulator_approval_status": {
                    "$ref": "#/$defs/RegulatorApprovalStatusEnum"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "EntityToFaultAssociation",
            "type": "object"
        },
        "EntityToObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "regulator_approval_status": {
                    "$ref": "#/$defs/RegulatorApprovalStatusEnum"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "EntityToObservableFeatureAssociation",
            "type": "object"
        },
        "EnvironmentalExposure": {
            "additionalProperties": false,
            "description": "A environmental exposure is a factor relating to abiotic processes in the environment",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "EnvironmentalExposure",
            "type": "object"
        },
        "EnvironmentalFeature": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "EnvironmentalFeature",
            "type": "object"
        },
        "EnvironmentalProcess": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "EnvironmentalProcess",
            "type": "object"
        },
        "EpidemiologicalOutcome": {
            "additionalProperties": false,
            "description": "An epidemiological outcome, such as societal fault burden, resulting from an exposure event.",
            "title": "EpidemiologicalOutcome",
            "type": "object"
        },
        "Event": {
            "additionalProperties": false,
            "description": "Something that happens at a given place and time.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Event",
            "type": "object"
        },
        "EvidenceType": {
            "additionalProperties": false,
            "description": "Class of evidence that supports an association",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "EvidenceType",
            "type": "object"
        },
        "ExposureEventToObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "Any association between an environment and a observable feature, where being in the environment influences the observable feature.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "observable class",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "sex_qualifier": {
                    "description": "a qualifier used in a entity association to state whether the association is specific to a particular sex.",
                    "type": "string"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ExposureEventToObservableFeatureAssociation",
            "type": "object"
        },
        "ExposureEventToOutcomeAssociation": {
            "additionalProperties": false,
            "description": "An association between an exposure event and an outcome.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "$ref": "#/$defs/Outcome",
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object."
                },
                "population_context_qualifier": {
                    "description": "a population (general, study, cohort, etc.) with a specific set of characteristics to constrain an association.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "temporal_context_qualifier": {
                    "description": "a constraint of time placed upon the truth value of an association. for time intervales, use temporal interval qualifier.",
                    "format": "time",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ExposureEventToOutcomeAssociation",
            "type": "object"
        },
        "Fault": {
            "additionalProperties": false,
            "description": "A disorder of structure or function, especially one that produces specific signs, observable features or symptoms or that affects a specific location and is not simply a direct result of injury.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Fault",
            "type": "object"
        },
        "FaultOrObservableFeature": {
            "additionalProperties": false,
            "description": "Either one of a fault or an individual observable feature.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "FaultOrObservableFeature",
            "type": "object"
        },
        "FaultOrObservableFeatureExposure": {
            "additionalProperties": false,
            "description": "A fault or observable feature state, when viewed as an exposure, represents an precondition, leading to or influencing an outcome",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "FaultOrObservableFeatureExposure",
            "type": "object"
        },
        "FaultOrObservableFeatureOutcome": {
            "additionalProperties": false,
            "description": "logical outcomes resulting from an exposure event which is the manifestation of a fault or other characteristic observable feature.",
            "title": "FaultOrObservableFeatureOutcome",
            "type": "object"
        },
        "FaultOrObservableFeatureToLocationAssociation": {
            "additionalProperties": false,
            "description": "An association between either a fault or a observable feature and an named thing, where the fault/feature manifests in that site.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "deployment entity in which the fault or feature is found.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "fault or observable feature",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "FaultOrObservableFeatureToLocationAssociation",
            "type": "object"
        },
        "FaultToExposureEventAssociation": {
            "additionalProperties": false,
            "description": "An association between an exposure event and a fault.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "fault class",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "FaultToExposureEventAssociation",
            "type": "object"
        },
        "FaultToObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "An association between a fault and a observable feature in which the observable feature is associated with the fault in some way.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "observable class",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "sex_qualifier": {
                    "description": "a qualifier used in a entity association to state whether the association is specific to a particular sex.",
                    "type": "string"
                },
                "subject": {
                    "description": "fault class",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "FaultToObservableFeatureAssociation",
            "type": "object"
        },
        "FaultyDeploymentExposure": {
            "additionalProperties": false,
            "description": "An abnormal deployment structure, when viewed as an exposure, representing an precondition, leading to or influencing an outcome,",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "FaultyDeploymentExposure",
            "type": "object"
        },
        "FaultyDeploymentOutcome": {
            "additionalProperties": false,
            "description": "An outcome resulting from an exposure event which is the manifestation of an abnormal deployment structure.",
            "title": "FaultyDeploymentOutcome",
            "type": "object"
        },
        "FaultyDeploymentStructure": {
            "additionalProperties": false,
            "description": "An deployment structure with the potential of have an abnormal or deleterious effect at the process, component, system, or group level.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "FaultyDeploymentStructure",
            "type": "object"
        },
        "FaultyProcess": {
            "additionalProperties": false,
            "description": "A computational function or a process having an abnormal or deleterious effect at the process, component, component type, or system level.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "enabled_by": {
                    "description": "holds between a process and an entity, where the entity executes the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_input": {
                    "description": "holds between a process and a continuant, where the continuant is an input into the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_output": {
                    "description": "holds between a process and a continuant, where the continuant is an output of the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "FaultyProcess",
            "type": "object"
        },
        "FaultyProcessExposure": {
            "additionalProperties": false,
            "description": "A faulty process, when viewed as an exposure, representing a precondition, leading to or influencing an outcome,",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "FaultyProcessExposure",
            "type": "object"
        },
        "FaultyProcessOutcome": {
            "additionalProperties": false,
            "description": "An outcome resulting from an exposure event which is the manifestation of a faulty process.",
            "title": "FaultyProcessOutcome",
            "type": "object"
        },
        "FunctionalAssociation": {
            "additionalProperties": false,
            "description": "An association between a assembly mixin (class, subclasses, or complex of subclasses) and either a operational activity, a computational process or a component location in which a function is executed",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "class describing the activity, process or localization of the subclasses",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "$ref": "#/$defs/AssemblyMixin",
                    "description": "class or assembly complex that has the function associated with the relevant term"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "FunctionalAssociation",
            "type": "object"
        },
        "GeographicExposure": {
            "additionalProperties": false,
            "description": "A geographic exposure is a factor relating to geographic proximity to some impactful entity.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "GeographicExposure",
            "type": "object"
        },
        "GeographicLocation": {
            "additionalProperties": false,
            "description": "a location that can be described in lat/long coordinates",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "latitude": {
                    "description": "latitude",
                    "type": "number"
                },
                "longitude": {
                    "description": "longitude",
                    "type": "number"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "GeographicLocation",
            "type": "object"
        },
        "GeographicLocationAtTime": {
            "additionalProperties": false,
            "description": "a location that can be described in lat/long coordinates, for a particular time",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "latitude": {
                    "description": "latitude",
                    "type": "number"
                },
                "longitude": {
                    "description": "longitude",
                    "type": "number"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "GeographicLocationAtTime",
            "type": "object"
        },
        "Homogeneity": {
            "additionalProperties": false,
            "description": "the quality or state of being all the same or all of the same kind.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "Homogeneity",
            "type": "object"
        },
        "IndividualSystem": {
            "additionalProperties": false,
            "description": "An instance of an system. For example, human. Computer, my pet cat.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "IndividualSystem",
            "type": "object"
        },
        "InformationContentEntityToNamedThingAssociation": {
            "additionalProperties": false,
            "description": "association between a named thing and a information content entity where the specific context of the relationship between that named thing and the publication is unknown. For example, model system databases often capture the knowledge that a named thing is found in a journal article, but not specifically the context in which that named thing was documented in the article. In these cases, this association with the accompanying predicate 'mentions' could be used. Conversely, for more specific associations (like 'named thing to fault association', the publication should be captured as an edge property).",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "InformationContentEntityToNamedThingAssociation",
            "type": "object"
        },
        "InformationResource": {
            "additionalProperties": false,
            "description": "A database or knowledgebase and its supporting ecosystem of interfaces and services that deliver content to consumers (e.g. web portals, APIs, query endpoints, streaming services, data downloads, etc.). A single Information Resource by this definition may span many different datasets or databases, and include many access endpoints and user interfaces. Information Resources include project-specific resources such as a Translator Knowledge Provider, and community knowledgebases.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "InformationResource",
            "type": "object"
        },
        "Inheritance": {
            "additionalProperties": false,
            "description": "The pattern or 'mode' in which a particular acquired trait or disorder is passed from one generation to the next",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Inheritance",
            "type": "object"
        },
        "LifecycleStage": {
            "additionalProperties": false,
            "description": "A stage of development or growth of a system.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "LifecycleStage",
            "type": "object"
        },
        "LogicalInterpretationEnum": {
            "description": "",
            "enum": [
                "some_some",
                "all_some",
                "inverse_all_some"
            ],
            "title": "LogicalInterpretationEnum",
            "type": "string"
        },
        "MaterialSample": {
            "additionalProperties": false,
            "description": "A sample is a limited quantity of something (e.g. an individual or set of individuals from a population, or a portion of a event) to be used for testing, analysis, inspection, investigation, demonstration, or trial use. [SIO]",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "MaterialSample",
            "type": "object"
        },
        "NamedSequence": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                }
            },
            "title": "NamedSequence",
            "type": "object"
        },
        "NamedThing": {
            "additionalProperties": false,
            "description": "a databased entity or concept/class",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "NamedThing",
            "type": "object"
        },
        "ObservableFeature": {
            "additionalProperties": false,
            "description": "A combination of entity and quality that makes up a observation statement. An observable characteristic of an element resulting from the interaction of its observable feature with its operational and tangible environment.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ObservableFeature",
            "type": "object"
        },
        "ObservableQuality": {
            "additionalProperties": false,
            "description": "A property of a observable",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "ObservableQuality",
            "type": "object"
        },
        "OfflineMaintenance": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "OfflineMaintenance",
            "type": "object"
        },
        "OfflineMaintenanceOutcome": {
            "additionalProperties": false,
            "description": "An outcome resulting from an exposure event which is the increased manifestation of acute (e.g. emergency) or chronic offline maintenance.",
            "title": "OfflineMaintenanceOutcome",
            "type": "object"
        },
        "Onset": {
            "additionalProperties": false,
            "description": "The beginning or start in which manifestations appear",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "Onset",
            "type": "object"
        },
        "OperationalActivity": {
            "additionalProperties": false,
            "description": "An execution of a operational function carried out by a subclasses or assembly complex.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "enabled_by": {
                    "description": "The subclasses, class, or complex that catalyzes the reaction",
                    "items": {
                        "$ref": "#/$defs/AssemblyMixin"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_input": {
                    "description": "A control entity that is the input for the reaction",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_output": {
                    "description": "A control entity that is the output for the reaction",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "OperationalActivity",
            "type": "object"
        },
        "OperationalActivityToPathwayAssociation": {
            "additionalProperties": false,
            "description": "Association that holds the relationship between a operational activity and the pathway it participates in.",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "connects an association to the object of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "OperationalActivityToPathwayAssociation",
            "type": "object"
        },
        "OperationalEntity": {
            "additionalProperties": false,
            "description": "A operational entity is a control entity composed of individual or bonded elements",
            "properties": {
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_controller": {
                    "description": "indicates whether operational entity is a controller",
                    "type": "boolean"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "OperationalEntity",
            "type": "object"
        },
        "OperationalMixture": {
            "additionalProperties": false,
            "description": "A operational mixture is a control mixture composed of two or more operational entities with known concentration.",
            "properties": {
                "administrative_operation_regulatory_status_world_wide": {
                    "description": "An agglomeration of administrative operation regulatory status worldwide. Not specific to one regulator.",
                    "type": "string"
                },
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "highest_regulator_approval_status": {
                    "description": "Should be the highest level of regulatory approval this control entity or device has, regardless of which named thing is currently being reviewed. For specific levels of approval for specific things, see the association slot: 'regulator approval status.'",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_supplement": {
                    "description": "added to something else in order to complete or enhance it.",
                    "type": "string"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "routes_of_delivery": {
                    "description": "the method or process of administering a control mixture to have effect in a named thing",
                    "items": {
                        "$ref": "#/$defs/DeliveryEnum"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "OperationalMixture",
            "type": "object"
        },
        "Pathway": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "enabled_by": {
                    "description": "holds between a process and an entity, where the entity executes the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_input": {
                    "description": "holds between a process and a continuant, where the continuant is an input into the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_output": {
                    "description": "holds between a process and a continuant, where the continuant is an output of the process",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Pathway",
            "type": "object"
        },
        "Person": {
            "additionalProperties": false,
            "description": "Represents a Person",
            "properties": {
                "age_in_years": {
                    "description": "Number of years since birth",
                    "type": "integer"
                },
                "birth_date": {
                    "description": "Date on which a person is born",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "primary_email": {
                    "description": "The main email address of a person",
                    "pattern": "^\\S+@[\\S+\\.]+\\S+",
                    "type": "string"
                },
                "vital_status": {
                    "$ref": "#/$defs/PersonStatus",
                    "description": "living or dead status"
                }
            },
            "required": [
                "id"
            ],
            "title": "Person",
            "type": "object"
        },
        "PersonCollection": {
            "additionalProperties": false,
            "description": "A holder for Person objects",
            "properties": {
                "entries": {
                    "additionalProperties": {
                        "$ref": "#/$defs/Person__identifier_optional"
                    },
                    "type": "object"
                }
            },
            "title": "PersonCollection",
            "type": "object"
        },
        "PersonStatus": {
            "description": "",
            "enum": [
                "ALIVE",
                "DEAD",
                "UNKNOWN"
            ],
            "title": "PersonStatus",
            "type": "string"
        },
        "Person__identifier_optional": {
            "additionalProperties": false,
            "description": "Represents a Person",
            "properties": {
                "age_in_years": {
                    "description": "Number of years since birth",
                    "type": "integer"
                },
                "birth_date": {
                    "description": "Date on which a person is born",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "primary_email": {
                    "description": "The main email address of a person",
                    "pattern": "^\\S+@[\\S+\\.]+\\S+",
                    "type": "string"
                },
                "vital_status": {
                    "$ref": "#/$defs/PersonStatus",
                    "description": "living or dead status"
                }
            },
            "required": [],
            "title": "Person",
            "type": "object"
        },
        "PhaseEnum": {
            "description": "Phase type",
            "enum": [
                "0",
                "1",
                "2"
            ],
            "title": "PhaseEnum",
            "type": "string"
        },
        "Phenomenon": {
            "additionalProperties": false,
            "description": "a fact or situation that is observed to exist or happen, especially one whose cause or explanation is in question",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Phenomenon",
            "type": "object"
        },
        "PhysicalEntity": {
            "additionalProperties": false,
            "description": "An entity that has material reality (a.k.a. tangible essence).",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "PhysicalEntity",
            "type": "object"
        },
        "PlanetaryEntity": {
            "additionalProperties": false,
            "description": "Any entity or process that exists at the level of the whole planet",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "PlanetaryEntity",
            "type": "object"
        },
        "PopulationOfIndividualSystems": {
            "additionalProperties": false,
            "description": "A collection of individuals from the same taxonomic class distinguished by one or more characteristics. Characteristics can include, but are not limited to, shared geographic location, acquireds, observable features.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "PopulationOfIndividualSystems",
            "type": "object"
        },
        "PopulationToPopulationAssociation": {
            "additionalProperties": false,
            "description": "An association between a two populations",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "the population that form the object of the association",
                    "type": "string"
                },
                "predicate": {
                    "description": "A relationship type that holds between the subject and object populations. Standard mereological relations can be used. E.g. subject part-of object, subject overlaps object. Derivation relationships can also be used",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "the population that form the subject of the association",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "PopulationToPopulationAssociation",
            "type": "object"
        },
        "Procedure": {
            "additionalProperties": false,
            "description": "A series of actions conducted in a certain order or manner",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Procedure",
            "type": "object"
        },
        "ProcessedMaterial": {
            "additionalProperties": false,
            "description": "A control entity (often a mixture) processed for some use. Is an entity created or changed during processing.",
            "properties": {
                "administrative_operation_regulatory_status_world_wide": {
                    "description": "An agglomeration of administrative operation regulatory status worldwide. Not specific to one regulator.",
                    "type": "string"
                },
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "highest_regulator_approval_status": {
                    "description": "Should be the highest level of regulatory approval this control entity or device has, regardless of which named thing is currently being reviewed. For specific levels of approval for specific things, see the association slot: 'regulator approval status.'",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_supplement": {
                    "description": "added to something else in order to complete or enhance it.",
                    "type": "string"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "routes_of_delivery": {
                    "description": "the method or process of administering a control mixture to have effect in a named thing",
                    "items": {
                        "$ref": "#/$defs/DeliveryEnum"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ProcessedMaterial",
            "type": "object"
        },
        "Publication": {
            "additionalProperties": false,
            "description": "Any published piece of information. Can refer to a whole publication, its encompassing publication (i.e. journal or book) or to a part of a publication, if of significant knowledge scope (e.g. a figure, figure legend, or section highlighted by NLP). The scope is intended to be general and include information published on the web, as well as printed materials, either directly or in one of the Publication Baselink category subclasses.",
            "properties": {
                "authors": {
                    "description": "connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as \"surname, firstname initial.\".  Note that this property is a node annotation voicing the citation list of authorship which might typically otherwise be more completely documented in base:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Different kinds of publication subtypes will have different preferred identifiers (curies when feasible). Precedence of identifiers for scientific articles is as follows PMID if available; DOI if not; actual alternate CURIE otherwise. Enclosing publications (i.e. referenced by 'published in' node property) such as books and journals, should have industry-standard identifier such as from ISBN and ISSN.",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "keywords": {
                    "description": "keywords tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "lcsh_terms": {
                    "description": "Library of Congress Subject Headings (LCSH) terms tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).",
                    "type": "string"
                },
                "pages": {
                    "description": "When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "summary": {
                    "description": "executive  summary of a publication",
                    "type": "string"
                },
                "type": {
                    "description": "Ontology term for publication type may be drawn from Dublin Core types (https://www.dublincore.org/specifications/dublin-core/dcmi-type-vocabulary/), the Confederation of Open Access Repositories (COAR) Controlled Vocabulary for Resource Type Genres (http://vocabularies.coar-repositories.org/documentation/resource_types/), Wikidata (https://www.wikidata.org/wiki/Wikidata:Publication_types), or equivalent publication type ontology. When a given publication type ontology term is used within a given knowledge graph, then the CURIE identified term must be documented in the graph as a concept node of base:category base:OntologyClass.",
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category",
                "type"
            ],
            "title": "Publication",
            "type": "object"
        },
        "QuantityValue": {
            "additionalProperties": false,
            "description": "A value of an attribute that is quantitative and measurable, expressed as a combination of a unit and a numeric value",
            "properties": {
                "has_numeric_value": {
                    "description": "connects a quantity value to a number",
                    "type": "number"
                },
                "has_unit": {
                    "description": "connects a quantity value to a unit",
                    "type": "string"
                }
            },
            "title": "QuantityValue",
            "type": "object"
        },
        "ReactionDirectionEnum": {
            "description": "",
            "enum": [
                "left_to_right",
                "right_to_left",
                "bidirectional",
                "neutral"
            ],
            "title": "ReactionDirectionEnum",
            "type": "string"
        },
        "ReactionSideEnum": {
            "description": "",
            "enum": [
                "left",
                "right"
            ],
            "title": "ReactionSideEnum",
            "type": "string"
        },
        "ReactionToCatalystAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "$ref": "#/$defs/ClassOrSubclasses",
                    "description": "the control element that is the target of the statement"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ratios": {
                    "description": "the relationship between relative quantities of substances, typically a ratio of whole integers",
                    "type": "integer"
                },
                "reaction_direction": {
                    "$ref": "#/$defs/ReactionDirectionEnum",
                    "description": "the direction of a reaction as constrained by the direction enum (ie: left_to_right, neutral, etc.)"
                },
                "reaction_side": {
                    "$ref": "#/$defs/ReactionSideEnum",
                    "description": "the side of a reaction being modeled (ie: left or right)"
                },
                "subject": {
                    "description": "the control entity or entity that is an interactor",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ReactionToCatalystAssociation",
            "type": "object"
        },
        "ReactionToParticipantAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "the control element that is the target of the statement",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ratios": {
                    "description": "the relationship between relative quantities of substances, typically a ratio of whole integers",
                    "type": "integer"
                },
                "reaction_direction": {
                    "$ref": "#/$defs/ReactionDirectionEnum",
                    "description": "the direction of a reaction as constrained by the direction enum (ie: left_to_right, neutral, etc.)"
                },
                "reaction_side": {
                    "$ref": "#/$defs/ReactionSideEnum",
                    "description": "the side of a reaction being modeled (ie: left or right)"
                },
                "subject": {
                    "description": "the control entity or entity that is an interactor",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ReactionToParticipantAssociation",
            "type": "object"
        },
        "RedundancyEntity": {
            "additionalProperties": false,
            "description": "A redundancy entity is a operational entity",
            "properties": {
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_controller": {
                    "description": "indicates whether operational entity is a controller",
                    "type": "boolean"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "RedundancyEntity",
            "type": "object"
        },
        "RegulatorAdverseEventEnum": {
            "description": "please consult with the Regulator guidelines.",
            "enum": [
                "0",
                "1"
            ],
            "title": "RegulatorAdverseEventEnum",
            "type": "string"
        },
        "RegulatorApprovalStatusEnum": {
            "description": "Regulator appoval status types",
            "enum": [
                "a",
                "b",
                "c"
            ],
            "title": "RegulatorApprovalStatusEnum",
            "type": "string"
        },
        "RegulatorGuidelineEventEnum": {
            "description": "\"please consult with the Regulator guidelines as proposed in this document, https://example.com/regulator.io/guideline\"",
            "enum": [],
            "title": "RegulatorGuidelineEventEnum",
            "type": "string"
        },
        "RelationshipType": {
            "additionalProperties": false,
            "description": "An OWL property used as an edge label",
            "properties": {
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "title": "RelationshipType",
            "type": "object"
        },
        "Replica": {
            "additionalProperties": false,
            "description": "The unit of service workload the component is capable of providing or protecting.",
            "properties": {
                "available_from": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                },
                "has_control_role": {
                    "description": "A role is particular behaviour which a control entity may exhibit.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "is_controller": {
                    "description": "indicates whether operational entity is a controller",
                    "type": "boolean"
                },
                "is_toxic": {
                    "type": "boolean"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "trade_name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Replica",
            "type": "object"
        },
        "Restoration": {
            "additionalProperties": false,
            "description": "A restoration is targeted at a fault or observable feature and may involve multiple administrative operation 'exposures', engineering devices and/or procedures",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_administrative_operation": {
                    "description": "connects an entity to one or more administrative operations",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_device": {
                    "description": "connects an entity to one or more devices",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_procedure": {
                    "description": "connects an entity to one or more procedures",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Restoration",
            "type": "object"
        },
        "SequenceEnum": {
            "description": "Sequence type",
            "enum": [
                "0",
                "1",
                "2"
            ],
            "title": "SequenceEnum",
            "type": "string"
        },
        "Serial": {
            "additionalProperties": false,
            "description": "This class may rarely be instantiated except if use cases of a given knowledge graph support its utility.",
            "properties": {
                "authors": {
                    "description": "connects an publication to the list of authors who contributed to the publication. This property should be a comma-delimited list of author names. It is recommended that an author's name be formatted as \"surname, firstname initial.\".  Note that this property is a node annotation voicing the citation list of authorship which might typically otherwise be more completely documented in base:PublicationToProviderAssociation defined edges which point to full details about an author and possibly, some qualifiers which clarify the specific status of a given author in the publication.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "Serials (journals) should have industry-standard identifier such as from ISSN.",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "iso_abbreviation": {
                    "description": "Standard abbreviation for periodicals in the International Organization for Standardization (ISO) 4 system See https://www.issn.org/services/online-services/access-to-the-ltwa/. If the 'published in' property is set, then the iso abbreviation pertains to the broader publication context (the journal) within which the given publication node is embedded, not the publication itself.",
                    "type": "string"
                },
                "issue": {
                    "description": "issue of a newspaper, a scientific journal or magazine for reference purpose",
                    "type": "string"
                },
                "keywords": {
                    "description": "keywords tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "lcsh_terms": {
                    "description": "Library of Congress Subject Headings (LCSH) terms tagging a publication",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "the 'title' of the publication is generally recorded in the 'name' property (inherited from NamedThing). The field name 'title' is now also tagged as an acceptable alias for the node property 'name' (just in case).",
                    "type": "string"
                },
                "pages": {
                    "description": "When a 2-tuple of page numbers are provided, they represent the start and end page of the publication within its parent publication context. For books, this may be set to the total number of pages of the book.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "summary": {
                    "description": "executive  summary of a publication",
                    "type": "string"
                },
                "type": {
                    "description": "Should generally be set to an ontology class defined term for 'serial' or 'journal'.",
                    "type": "string"
                },
                "volume": {
                    "description": "volume of a book or music release in a collection/series or a published collection of journal issues in a serial publication",
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category",
                "type"
            ],
            "title": "Serial",
            "type": "object"
        },
        "ServiceType": {
            "additionalProperties": false,
            "description": "An information content entity that describes a workload by specifying the total variation in workload sequence and/or workload expression, relative to some established background",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                },
                "has_homogeneity": {
                    "description": "is effectively homogenous",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "ServiceType",
            "type": "object"
        },
        "ServiceTypeToClassAssociation": {
            "additionalProperties": false,
            "description": "Any association between a service type and a class. The service type have have multiple variants in that class or a single one. There is no assumption of cardinality",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "class implicated in service type",
                    "type": "string"
                },
                "predicate": {
                    "description": "relationship type used to connect service type to class",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "parent service type",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ServiceTypeToClassAssociation",
            "type": "object"
        },
        "ServiceTypeToFaultAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "a fault that is associated with that service type",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "E.g. is fault for",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "subject": {
                    "description": "a service type that is associated in some way with a fault state",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ServiceTypeToFaultAssociation",
            "type": "object"
        },
        "ServiceTypeToObservableFeatureAssociation": {
            "additionalProperties": false,
            "description": "Any association between one service type and a observable feature, where having the service type confers the observable feature, either in isolation or through environment",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "frequency_qualifier": {
                    "description": "a qualifier used in a observabile association to state how frequent the observable feature is seen in the subject",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "observable class",
                    "type": "string"
                },
                "onset_qualifier": {
                    "description": "a qualifier used in a observable association to state when the observable feature appears is in the subject",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity_qualifier": {
                    "description": "a qualifier used in a observable association to state how severe the observable feature is in the subject",
                    "type": "string"
                },
                "sex_qualifier": {
                    "description": "a qualifier used in a entity association to state whether the association is specific to a particular sex.",
                    "type": "string"
                },
                "subject": {
                    "description": "service type that is associated with the observable feature",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ServiceTypeToObservableFeatureAssociation",
            "type": "object"
        },
        "ServiceTypeToServiceTypePartAssociation": {
            "additionalProperties": false,
            "description": "Any association between one service type and a service type entity that is a subset of it",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "child service type",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "parent service type",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "ServiceTypeToServiceTypePartAssociation",
            "type": "object"
        },
        "SeverityValue": {
            "additionalProperties": false,
            "description": "describes the severity of a observable feature or fault",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "SeverityValue",
            "type": "object"
        },
        "SocioeconomicAttribute": {
            "additionalProperties": false,
            "description": "Attributes relating to a socioeconomic manifestation",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "SocioeconomicAttribute",
            "type": "object"
        },
        "SocioeconomicExposure": {
            "additionalProperties": false,
            "description": "A socioeconomic exposure is a factor relating to social and financial status of an affected individual (e.g. poverty).",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category",
                "has_attribute"
            ],
            "title": "SocioeconomicExposure",
            "type": "object"
        },
        "SocioeconomicOutcome": {
            "additionalProperties": false,
            "description": "An general social or economic outcome, such as healthcare costs, utilization, etc., resulting from an exposure event",
            "title": "SocioeconomicOutcome",
            "type": "object"
        },
        "Study": {
            "additionalProperties": false,
            "description": "a detailed investigation and/or analysis",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Study",
            "type": "object"
        },
        "StudyPopulation": {
            "additionalProperties": false,
            "description": "A group of individuals banded together as a group as participants in a research study.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "may often be an system attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "StudyPopulation",
            "type": "object"
        },
        "StudyVariable": {
            "additionalProperties": false,
            "description": "a variable that is used as a measure in the investigation of a study",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "StudyVariable",
            "type": "object"
        },
        "SystemAttribute": {
            "additionalProperties": false,
            "description": "describes a characteristic of an system entity.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "has_attribute_type",
                "id",
                "category"
            ],
            "title": "SystemAttribute",
            "type": "object"
        },
        "SystemOperation": {
            "additionalProperties": false,
            "description": "A group that is composed of a chain of instructions and is produced by translation of service message",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "classes are typically designated by a short symbol and a full name. We map the symbol to the default display name and use an additional slot for full name",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "synonym": {
                    "description": "Alternate human-readable names for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "SystemOperation",
            "type": "object"
        },
        "SystemOperationDomain": {
            "additionalProperties": false,
            "description": "The domain the system operation belongs to.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_class_or_subclasses": {
                    "description": "connects an entity with one or more classes or subclasses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "SystemOperationDomain",
            "type": "object"
        },
        "SystemTaxon": {
            "additionalProperties": false,
            "description": "A classification of a set of systems. Example instances: Can also be used to represent subsystems.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "SystemTaxon",
            "type": "object"
        },
        "SystemToSystemAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "An association between two individual systems.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "SystemToSystemAssociation",
            "type": "object"
        },
        "TaxonToTaxonAssociation": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "aggregator_knowledge_source": {
                    "description": "An intermediate aggregator resource from which knowledge expressed in an Association was retrieved downstream of the original source, on its path to its current serialized form.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_evidence": {
                    "description": "connects an association to an instance of supporting evidence",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "knowledge_source": {
                    "description": "An Information Resource from which the knowledge expressed in an Association was retrieved, directly or indirectly. This can be any resource through which the knowledge passed on its way to its currently serialized form. In practice, implementers should use one of the more specific subtypes of this generic property.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "negated": {
                    "description": "if set to true, then the association is negated i.e. is not true",
                    "type": "boolean"
                },
                "object": {
                    "description": "An association between individuals of different taxa.",
                    "type": "string"
                },
                "predicate": {
                    "description": "A high-level grouping for the relationship type. AKA minimal predicate. This is analogous to category for nodes.",
                    "type": "string"
                },
                "primary_knowledge_source": {
                    "description": "The most upstream source of the knowledge expressed in an Association that an implementer can identify.  Performing a rigorous analysis of upstream data providers is expected; every effort is made to catalog the most upstream source of data in this property.  Only one data source should be declared primary in any association.  \"aggregator knowledge source\" can be used to capture non-primary sources.",
                    "type": "string"
                },
                "publications": {
                    "description": "One or more publications that report the statement expressed in an Association, or provide information used as evidence supporting this statement.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "qualifiers": {
                    "description": "connects an association to qualifiers that modify or qualify the meaning of that association",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "subject": {
                    "description": "connects an association to the subject of the association. For example, in a class-to-observable feature association, the class is subject and observable feature is object.",
                    "type": "string"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "description": "rdf:type of base:Association should be fixed at rdf:Statement",
                    "type": "string"
                }
            },
            "required": [
                "subject",
                "predicate",
                "object",
                "id"
            ],
            "title": "TaxonToTaxonAssociation",
            "type": "object"
        },
        "TaxonomicRank": {
            "additionalProperties": false,
            "description": "A descriptor for the rank within a taxonomic classification. Example instance: TAXRANK:0000017 (kingdom)",
            "properties": {
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "title": "TaxonomicRank",
            "type": "object"
        },
        "TerminationOutcome": {
            "additionalProperties": false,
            "description": "An outcome of termination from resulting from an exposure event.",
            "title": "TerminationOutcome",
            "type": "object"
        },
        "TextMiningResult": {
            "additionalProperties": false,
            "description": "A result of text mining.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "creation_date": {
                    "description": "date on which an entity was created. This can be applied to nodes or edges",
                    "format": "date",
                    "type": "string"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rights": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "TextMiningResult",
            "type": "object"
        },
        "Workload": {
            "additionalProperties": false,
            "description": "A workload is the sum of acquired material within a named thing.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "A human-readable name for an attribute or entity.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "category"
            ],
            "title": "Workload",
            "type": "object"
        },
        "WorkloadBackgroundExposure": {
            "additionalProperties": false,
            "description": "A workload background exposure is where an individual's specific workload background of named things, sequences or other pre-existing workload conditions constitute a kind of 'exposure' to the system, leading to or influencing an outcome.",
            "properties": {
                "category": {
                    "description": "Name of the high level ontology class in which this entity is categorized. Corresponds to the label for the base entity type class.\n * In a neo4j database this MAY correspond to the neo4j label tag.\n * In an RDF database it should be a base model class URI.\nThis field is multi-valued. It should include values for ancestors of the base class\nIn an RDF database, nodes will typically have an rdf:type triples. This can be to the most specific base class, or potentially to a class more specific than something in base.",
                    "items": {
                        "type": "string"
                    },
                    "pattern": "^base:\\d+$",
                    "type": "array"
                },
                "description": {
                    "description": "a human-readable description of an entity",
                    "type": "string"
                },
                "has_attribute": {
                    "description": "connects any entity to an attribute",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_attribute_type": {
                    "description": "connects an attribute to a class that describes it",
                    "type": "string"
                },
                "has_class_or_subclasses": {
                    "description": "connects an entity with one or more classes or subclasses",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_computational_sequence": {
                    "description": "connects a workload feature to its sequence",
                    "type": "string"
                },
                "has_qualitative_value": {
                    "description": "connects an attribute to a value",
                    "type": "string"
                },
                "has_quantitative_value": {
                    "description": "connects an attribute to a value",
                    "items": {
                        "$ref": "#/$defs/QuantityValue"
                    },
                    "type": "array"
                },
                "id": {
                    "description": "A unique identifier for an entity. Must be either a CURIE shorthand for a URI or a complete URI",
                    "type": "string"
                },
                "in_taxon": {
                    "description": "connects an entity to its taxonomic classification. Only certain kinds of entities can be taxonomically classified; see 'thing with taxon'",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "iri": {
                    "description": "An IRI for an entity. This is determined by the id using expansion rules.",
                    "type": "string"
                },
                "name": {
                    "description": "The human-readable 'attribute name' can be set to a string which reflects its context of interpretation, e.g. SEPIO evidence/provenance/confidence annotation or it can default to the name associated with the 'has attribute type' slot ontology term.",
                    "type": "string"
                },
                "provided_by": {
                    "description": "The value in this node property represents the knowledge provider that created or assembled the node and all of its attributes.  Used internally to represent how a particular node made its way into a knowledge provider or graph.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "timepoint": {
                    "description": "a point in time",
                    "format": "time",
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "xref": {
                    "description": "Alternate CURIEs for a thing",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "has_attribute_type",
                "category"
            ],
            "title": "WorkloadBackgroundExposure",
            "type": "object"
        }
    },
    "$id": "https://w3id.org/lmodel/base",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": true,
    "metamodel_version": "1.7.0",
    "properties": {
        "entries": {
            "additionalProperties": {
                "$ref": "#/$defs/Person__identifier_optional"
            },
            "type": "object"
        }
    },
    "title": "base",
    "type": "object",
    "version": "0.1.0"
}